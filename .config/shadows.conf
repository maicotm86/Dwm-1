#################################
#
# Backend
#
#################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "glx";

#################################
#
# GLX backend
#
#################################

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
# Useful with --glx-swap-method, as well.
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
glx-use-copysubbuffermesa = false;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
glx-no-rebind-pixmap = false;


# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
glx-swap-method = "undefined";


# Dim inactive windows. (0.0 - 1.0)
 inactive-dim = 0.2;
# Do not let dimness adjust based on window opacity.
inactive-dim-fixed = true;
blur-kern = "7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
#blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
#blur-kern = "3,3,1,1,1,1,1,1,1,1"
# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
blur-background = true;
# Blur background of opaque windows with transparent frames as well.
blur-background-frame = true;
# Do not let blur radius adjust based on window opacity.
blur-background-fixed = true;
blur-background-exclude = [
    #"window_type = 'dock'",
    "window_type = 'desktop'",
    #"window_type = 'popup_menu'",xxx
];
#opacity-rule = [
#  "93:class_g = 'URxvt' && !_NET_WM_STATE@:32a",
#  "90:class_g = 'Qvim' && !_NET_WM_STATE@:32a",
#  "95:class_g = 'Zathura' && !_NET_WM_STATE@:32a",
#  "95:class_g = 'Spacefm' && !_NET_WM_STATE@:32a",
#  "88:class_g = 'LilyTerm' && !_NET_WM_STATE@:32a",
#  "80:class_g = 'i3-bar' && !_NET_WM_STATE@:32a",
#  "93:class_g = 'i3-frame' && !_NET_WM_STATE@:32a",
#  "0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
#];

